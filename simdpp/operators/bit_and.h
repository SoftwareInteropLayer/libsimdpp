// This file is generated by tools/gen_operators.pl. CHANGES WILL BE OVERWRITTEN
/*  Copyright (C) 2013-2014  Povilas Kanapickas <povilas@radix.lt>

    Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
            http://www.boost.org/LICENSE_1_0.txt)
*/

#ifndef LIBSIMDPP_SIMDPP_CORE_BIT_AND_OPERATOR_H
#define LIBSIMDPP_SIMDPP_CORE_BIT_AND_OPERATOR_H

#ifndef LIBSIMDPP_SIMD_H
    #error "This file must be included through simd.h"
#endif

#include <simdpp/types.h>
#include <simdpp/core/bit_and.h>

namespace simdpp {
namespace SIMDPP_ARCH_NAMESPACE {

/** Computes bitwise AND of integer or floating-point vectors.

    @code
    r0 = a0 & b0
    ...
    rN = aN & bN
    @endcode

    @todo: icost
*/
template<unsigned N, class V1, class V2> SIMDPP_INL
typename detail::get_expr_bitwise2_and<V1, V2>::type
        operator&(const any_vec<N,V1>& a,
                  const any_vec<N,V2>& b)
{
    return bit_and(a, b);
}

// support scalar arguments
template<unsigned N, class V> SIMDPP_INL
typename detail::get_expr_bitwise2_and<unsigned, V>::type
        operator&(const unsigned& a, const any_vec<N,V>& b)
{
    return bit_and(a, b);
}
template<unsigned N, class V> SIMDPP_INL
typename detail::get_expr_bitwise2_and<unsigned long, V>::type
        operator&(const unsigned long& a, const any_vec<N,V>& b)
{
    return bit_and(a, b);
}
template<unsigned N, class V> SIMDPP_INL
typename detail::get_expr_bitwise2_and<unsigned long long, V>::type
        operator&(const unsigned long long& a, const any_vec<N,V>& b)
{
    return bit_and(a, b);
}
template<unsigned N, class V> SIMDPP_INL
typename detail::get_expr_bitwise2_and<int, V>::type
        operator&(const int& a, const any_vec<N,V>& b)
{
    return bit_and(a, b);
}
template<unsigned N, class V> SIMDPP_INL
typename detail::get_expr_bitwise2_and<long, V>::type
        operator&(const long& a, const any_vec<N,V>& b)
{
    return bit_and(a, b);
}
template<unsigned N, class V> SIMDPP_INL
typename detail::get_expr_bitwise2_and<long long, V>::type
        operator&(const long long& a, const any_vec<N,V>& b)
{
    return bit_and(a, b);
}

template<unsigned N, class V> SIMDPP_INL
typename detail::get_expr_bitwise2_and<V, unsigned>::type
        operator&(const any_vec<N,V>& a, const unsigned& b)
{
    return bit_and(a, b);
}
template<unsigned N, class V> SIMDPP_INL
typename detail::get_expr_bitwise2_and<V, unsigned long>::type
        operator&(const any_vec<N,V>& a, const unsigned long& b)
{
    return bit_and(a, b);
}
template<unsigned N, class V> SIMDPP_INL
typename detail::get_expr_bitwise2_and<V, unsigned long long>::type
        operator&(const any_vec<N,V>& a, const unsigned long long& b)
{
    return bit_and(a, b);
}
template<unsigned N, class V> SIMDPP_INL
typename detail::get_expr_bitwise2_and<V, int>::type
        operator&(const any_vec<N,V>& a, const int& b)
{
    return bit_and(a, b);
}
template<unsigned N, class V> SIMDPP_INL
typename detail::get_expr_bitwise2_and<V, long>::type
        operator&(const any_vec<N,V>& a, const long& b)
{
    return bit_and(a, b);
}
template<unsigned N, class V> SIMDPP_INL
typename detail::get_expr_bitwise2_and<V, long long>::type
        operator&(const any_vec<N,V>& a, const long long& b)
{
    return bit_and(a, b);
}


} // namespace SIMDPP_ARCH_NAMESPACE
} // namespace simdpp

#endif

